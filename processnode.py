__all__ = ['ProcessNode']


from target import Target as tg
import numpy as np


class ProcessNode:
    def __init__(self, id: int, time: int, type: int, subtype: int, pid: int, ppid: int, cmdLine: str, processName: str):
        self.id=id
        self.time=time
        self.type=type
        self.subtype=subtype
        self.pid=pid
        self.ppid = ppid
        self.cmdLine = cmdLine
        self.processName=processName

        self.event_list=[]
        self.state_list=[]
        self.cur_state=np.zeros(2,3)
        self.seq_len = 0

        # init tags
        self.sTag: float = 0.0
        # benign
        self.iTag: float = 0.0
        #
        self.cTag: float = 0.0

        if self.ppid==-1:
            # unknown parent
            self.sTag = tg.get_stag_dangerous()
        elif self.ppid==0:
            # process generated by root
            self.sTag=tg.get_stag_benign()
        else:
            from globals import GlobalVariable as gv
            parent_id=gv.get_processNode_by_pid(self.ppid)
            parent_node=gv.get_processNode(parent_id)
            if not parent_node:
                # parent node not exist or has been released, then this node is not valid
                self.sTag = tg.get_stag_dangerous()
                self.iTa = tg.get_itag_dangerous()
                self.cTag = tg.get_ctag_dangerous()
            else:
                self.sTag = parent_node.sTag
                self.iTag = parent_node.iTag
                self.cTag = parent_node.cTag

    def get_matrix_array(self, padding: 4):
        if padding < 4:
            return None

        return [self.subtype, self.sTag, self.iTag, self.cTag]+[0]*(padding-4)

    def add_event(self, event_id: int):
        self.event_list.append(event_id)

    def get_event_list(self)->list[int]:
        return self.event_list

    def state_update(self, state: np.array):
        self.cur_state = state
        self.state_list.append(state)
        self.seq_len += 1

    def generate_sequence(self, length:5):
        if self.seq_len<length:
            return []
        res=[]
        for i in range(len(self.state_list)-length):
            res.append(self.state_list[i:i+length+1])
        return res